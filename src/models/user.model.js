import mongoose from "mongoose";
import { Schema } from "mongoose";
import jwt from "jsonwebtoken";
import bcrypt from "bcryptjs";

const userScehma = new Schema({
    username: {
        type: String,
        required: true,
        unique: true,
        lowercase: true,
        trim: true,
        index: true  //to anable searching field
    },
    email: {
        type: String,
        required: true,
        unique: true,
        lowercase: true,
        trim: true,
    },
    fullName: {
        type: String,
        required: true,
        trim: true,
        // index: true
    },
    avatar: {
        type: String, //cloudnary url
        required: true,
    },
    coverImage: {
        type: String,
    },
    watchHistory: [
        {
            type: Schema.Types.ObjectId,
            ref: "Video"
        }
    ],
    password: {
        type: String,
        required: [true, "Password is required"]
    },
    refreshToken: {
        type: String
    }
},
    {
        timestamps: true,
    }
)

userScehma.pre("save", async function (next) {
    if (!this.isModified("password"))
        return next()
    this.password = bcrypt.hash(this.password, 10)  // chnage(encrypt) the password when user enter it first time or chnage it
    next()
})

userScehma.methods.isPasswordCorrect = async function (password) {
    return await bcrypt.compare(password, this.password)         //here this.password is the encrepted once
}

userScehma.methods.generateAccessToken = function () {
    return jwt.sign(
        {                 //generally do not take much time but depends upon use case we can write async
            _id: this._id,                 // _id is the attribute name of the unique id generated by the mongoDb
            email: this.email,
            username: this.username,
            avatar: this.avatar
        },
        process.env.ACCESS_TOKEN_SECRET,
        {
            expiresIn: "ACCESS_TOKEN_EXPIRY"
        }
    )
}

userScehma.methods.generateRefreshToken = function () {
    return jwt.sign(
        {
            _id: this._id,   //refreshToken is refresh repeatedly so we kept less ingo in it
        },
        process.env.REFRESH_TOKEN_SECRET,
        {
            expiresIn: "REFRESH_TOKEN_EXPIRY"
        }
    )
}

export const User = mongoose.model("User", userScehma)